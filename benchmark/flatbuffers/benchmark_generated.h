// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_BENCHMARK_BENCHMARK_H_
#define FLATBUFFERS_GENERATED_BENCHMARK_BENCHMARK_H_

#include "flatbuffers/flatbuffers.h"

namespace benchmark {

struct SubMessage;

struct Message1;

struct Message2;

struct SubMessage2;

struct Message3;

struct Message;

enum Enum {
  Enum_E0 = 0,
  Enum_E1 = 1,
  Enum_E2 = 2,
  Enum_E3 = 3,
  Enum_E5 = 4,
  Enum_MIN = Enum_E0,
  Enum_MAX = Enum_E5
};

inline const Enum (&EnumValuesEnum())[5] {
  static const Enum values[] = {
    Enum_E0,
    Enum_E1,
    Enum_E2,
    Enum_E3,
    Enum_E5
  };
  return values;
}

inline const char * const *EnumNamesEnum() {
  static const char * const names[6] = {
    "E0",
    "E1",
    "E2",
    "E3",
    "E5",
    nullptr
  };
  return names;
}

inline const char *EnumNameEnum(Enum e) {
  if (e < Enum_E0 || e > Enum_E5) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesEnum()[index];
}

enum Oneof {
  Oneof_NONE = 0,
  Oneof_message1 = 1,
  Oneof_message2 = 2,
  Oneof_message3 = 3,
  Oneof_MIN = Oneof_NONE,
  Oneof_MAX = Oneof_message3
};

inline const Oneof (&EnumValuesOneof())[4] {
  static const Oneof values[] = {
    Oneof_NONE,
    Oneof_message1,
    Oneof_message2,
    Oneof_message3
  };
  return values;
}

inline const char * const *EnumNamesOneof() {
  static const char * const names[5] = {
    "NONE",
    "message1",
    "message2",
    "message3",
    nullptr
  };
  return names;
}

inline const char *EnumNameOneof(Oneof e) {
  if (e < Oneof_NONE || e > Oneof_message3) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesOneof()[index];
}

template<typename T> struct OneofTraits {
  static const Oneof enum_value = Oneof_NONE;
};

template<> struct OneofTraits<benchmark::Message1> {
  static const Oneof enum_value = Oneof_message1;
};

template<> struct OneofTraits<benchmark::Message2> {
  static const Oneof enum_value = Oneof_message2;
};

template<> struct OneofTraits<benchmark::Message3> {
  static const Oneof enum_value = Oneof_message3;
};

bool VerifyOneof(flatbuffers::Verifier &verifier, const void *obj, Oneof type);
bool VerifyOneofVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct SubMessage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FIELD1 = 4,
    VT_FIELD2 = 6,
    VT_FIELD3 = 8,
    VT_FIELD15 = 10,
    VT_FIELD12 = 12,
    VT_FIELD13 = 14,
    VT_FIELD14 = 16,
    VT_FIELD21 = 18,
    VT_FIELD22 = 20,
    VT_FIELD206 = 22,
    VT_FIELD203 = 24,
    VT_FIELD204 = 26,
    VT_FIELD205 = 28,
    VT_FIELD207 = 30,
    VT_FIELD300 = 32
  };
  uint32_t field1() const {
    return GetField<uint32_t>(VT_FIELD1, 0);
  }
  uint32_t field2() const {
    return GetField<uint32_t>(VT_FIELD2, 0);
  }
  int32_t field3() const {
    return GetField<int32_t>(VT_FIELD3, 0);
  }
  const flatbuffers::String *field15() const {
    return GetPointer<const flatbuffers::String *>(VT_FIELD15);
  }
  const flatbuffers::Vector<uint8_t> *field12() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_FIELD12);
  }
  int64_t field13() const {
    return GetField<int64_t>(VT_FIELD13, 0);
  }
  int64_t field14() const {
    return GetField<int64_t>(VT_FIELD14, 0);
  }
  uint64_t field21() const {
    return GetField<uint64_t>(VT_FIELD21, 0);
  }
  int32_t field22() const {
    return GetField<int32_t>(VT_FIELD22, 0);
  }
  bool field206() const {
    return GetField<uint8_t>(VT_FIELD206, 0) != 0;
  }
  uint32_t field203() const {
    return GetField<uint32_t>(VT_FIELD203, 0);
  }
  int32_t field204() const {
    return GetField<int32_t>(VT_FIELD204, 0);
  }
  const flatbuffers::String *field205() const {
    return GetPointer<const flatbuffers::String *>(VT_FIELD205);
  }
  uint64_t field207() const {
    return GetField<uint64_t>(VT_FIELD207, 0);
  }
  benchmark::Enum field300() const {
    return static_cast<benchmark::Enum>(GetField<int32_t>(VT_FIELD300, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_FIELD1) &&
           VerifyField<uint32_t>(verifier, VT_FIELD2) &&
           VerifyField<int32_t>(verifier, VT_FIELD3) &&
           VerifyOffset(verifier, VT_FIELD15) &&
           verifier.VerifyString(field15()) &&
           VerifyOffset(verifier, VT_FIELD12) &&
           verifier.VerifyVector(field12()) &&
           VerifyField<int64_t>(verifier, VT_FIELD13) &&
           VerifyField<int64_t>(verifier, VT_FIELD14) &&
           VerifyField<uint64_t>(verifier, VT_FIELD21) &&
           VerifyField<int32_t>(verifier, VT_FIELD22) &&
           VerifyField<uint8_t>(verifier, VT_FIELD206) &&
           VerifyField<uint32_t>(verifier, VT_FIELD203) &&
           VerifyField<int32_t>(verifier, VT_FIELD204) &&
           VerifyOffset(verifier, VT_FIELD205) &&
           verifier.VerifyString(field205()) &&
           VerifyField<uint64_t>(verifier, VT_FIELD207) &&
           VerifyField<int32_t>(verifier, VT_FIELD300) &&
           verifier.EndTable();
  }
};

struct SubMessageBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_field1(uint32_t field1) {
    fbb_.AddElement<uint32_t>(SubMessage::VT_FIELD1, field1, 0);
  }
  void add_field2(uint32_t field2) {
    fbb_.AddElement<uint32_t>(SubMessage::VT_FIELD2, field2, 0);
  }
  void add_field3(int32_t field3) {
    fbb_.AddElement<int32_t>(SubMessage::VT_FIELD3, field3, 0);
  }
  void add_field15(flatbuffers::Offset<flatbuffers::String> field15) {
    fbb_.AddOffset(SubMessage::VT_FIELD15, field15);
  }
  void add_field12(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> field12) {
    fbb_.AddOffset(SubMessage::VT_FIELD12, field12);
  }
  void add_field13(int64_t field13) {
    fbb_.AddElement<int64_t>(SubMessage::VT_FIELD13, field13, 0);
  }
  void add_field14(int64_t field14) {
    fbb_.AddElement<int64_t>(SubMessage::VT_FIELD14, field14, 0);
  }
  void add_field21(uint64_t field21) {
    fbb_.AddElement<uint64_t>(SubMessage::VT_FIELD21, field21, 0);
  }
  void add_field22(int32_t field22) {
    fbb_.AddElement<int32_t>(SubMessage::VT_FIELD22, field22, 0);
  }
  void add_field206(bool field206) {
    fbb_.AddElement<uint8_t>(SubMessage::VT_FIELD206, static_cast<uint8_t>(field206), 0);
  }
  void add_field203(uint32_t field203) {
    fbb_.AddElement<uint32_t>(SubMessage::VT_FIELD203, field203, 0);
  }
  void add_field204(int32_t field204) {
    fbb_.AddElement<int32_t>(SubMessage::VT_FIELD204, field204, 0);
  }
  void add_field205(flatbuffers::Offset<flatbuffers::String> field205) {
    fbb_.AddOffset(SubMessage::VT_FIELD205, field205);
  }
  void add_field207(uint64_t field207) {
    fbb_.AddElement<uint64_t>(SubMessage::VT_FIELD207, field207, 0);
  }
  void add_field300(benchmark::Enum field300) {
    fbb_.AddElement<int32_t>(SubMessage::VT_FIELD300, static_cast<int32_t>(field300), 0);
  }
  explicit SubMessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SubMessageBuilder &operator=(const SubMessageBuilder &);
  flatbuffers::Offset<SubMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SubMessage>(end);
    return o;
  }
};

inline flatbuffers::Offset<SubMessage> CreateSubMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t field1 = 0,
    uint32_t field2 = 0,
    int32_t field3 = 0,
    flatbuffers::Offset<flatbuffers::String> field15 = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> field12 = 0,
    int64_t field13 = 0,
    int64_t field14 = 0,
    uint64_t field21 = 0,
    int32_t field22 = 0,
    bool field206 = false,
    uint32_t field203 = 0,
    int32_t field204 = 0,
    flatbuffers::Offset<flatbuffers::String> field205 = 0,
    uint64_t field207 = 0,
    benchmark::Enum field300 = benchmark::Enum_E0) {
  SubMessageBuilder builder_(_fbb);
  builder_.add_field207(field207);
  builder_.add_field21(field21);
  builder_.add_field14(field14);
  builder_.add_field13(field13);
  builder_.add_field300(field300);
  builder_.add_field205(field205);
  builder_.add_field204(field204);
  builder_.add_field203(field203);
  builder_.add_field22(field22);
  builder_.add_field12(field12);
  builder_.add_field15(field15);
  builder_.add_field3(field3);
  builder_.add_field2(field2);
  builder_.add_field1(field1);
  builder_.add_field206(field206);
  return builder_.Finish();
}

inline flatbuffers::Offset<SubMessage> CreateSubMessageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t field1 = 0,
    uint32_t field2 = 0,
    int32_t field3 = 0,
    const char *field15 = nullptr,
    const std::vector<uint8_t> *field12 = nullptr,
    int64_t field13 = 0,
    int64_t field14 = 0,
    uint64_t field21 = 0,
    int32_t field22 = 0,
    bool field206 = false,
    uint32_t field203 = 0,
    int32_t field204 = 0,
    const char *field205 = nullptr,
    uint64_t field207 = 0,
    benchmark::Enum field300 = benchmark::Enum_E0) {
  auto field15__ = field15 ? _fbb.CreateString(field15) : 0;
  auto field12__ = field12 ? _fbb.CreateVector<uint8_t>(*field12) : 0;
  auto field205__ = field205 ? _fbb.CreateString(field205) : 0;
  return benchmark::CreateSubMessage(
      _fbb,
      field1,
      field2,
      field3,
      field15__,
      field12__,
      field13,
      field14,
      field21,
      field22,
      field206,
      field203,
      field204,
      field205__,
      field207,
      field300);
}

struct Message1 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FIELD80 = 4,
    VT_FIELD81 = 6,
    VT_FIELD2 = 8,
    VT_FIELD3 = 10,
    VT_FIELD280 = 12,
    VT_FIELD6 = 14,
    VT_FIELD22 = 16,
    VT_FIELD4 = 18,
    VT_FIELD59 = 20,
    VT_FIELD16 = 22,
    VT_FIELD150 = 24,
    VT_FIELD23 = 26,
    VT_FIELD24 = 28,
    VT_FIELD25 = 30,
    VT_FIELD15 = 32,
    VT_FIELD78 = 34,
    VT_FIELD67 = 36,
    VT_FIELD68 = 38,
    VT_FIELD128 = 40,
    VT_FIELD129 = 42,
    VT_FIELD131 = 44
  };
  bool field80() const {
    return GetField<uint8_t>(VT_FIELD80, 0) != 0;
  }
  bool field81() const {
    return GetField<uint8_t>(VT_FIELD81, 0) != 0;
  }
  int32_t field2() const {
    return GetField<int32_t>(VT_FIELD2, 0);
  }
  int32_t field3() const {
    return GetField<int32_t>(VT_FIELD3, 0);
  }
  int32_t field280() const {
    return GetField<int32_t>(VT_FIELD280, 0);
  }
  int32_t field6() const {
    return GetField<int32_t>(VT_FIELD6, 0);
  }
  int64_t field22() const {
    return GetField<int64_t>(VT_FIELD22, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *field4() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_FIELD4);
  }
  bool field59() const {
    return GetField<uint8_t>(VT_FIELD59, 0) != 0;
  }
  int32_t field16() const {
    return GetField<int32_t>(VT_FIELD16, 0);
  }
  int32_t field150() const {
    return GetField<int32_t>(VT_FIELD150, 0);
  }
  int32_t field23() const {
    return GetField<int32_t>(VT_FIELD23, 0);
  }
  bool field24() const {
    return GetField<uint8_t>(VT_FIELD24, 0) != 0;
  }
  int32_t field25() const {
    return GetField<int32_t>(VT_FIELD25, 0);
  }
  const benchmark::SubMessage *field15() const {
    return GetPointer<const benchmark::SubMessage *>(VT_FIELD15);
  }
  bool field78() const {
    return GetField<uint8_t>(VT_FIELD78, 0) != 0;
  }
  int32_t field67() const {
    return GetField<int32_t>(VT_FIELD67, 0);
  }
  int32_t field68() const {
    return GetField<int32_t>(VT_FIELD68, 0);
  }
  int32_t field128() const {
    return GetField<int32_t>(VT_FIELD128, 0);
  }
  const flatbuffers::String *field129() const {
    return GetPointer<const flatbuffers::String *>(VT_FIELD129);
  }
  int32_t field131() const {
    return GetField<int32_t>(VT_FIELD131, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_FIELD80) &&
           VerifyField<uint8_t>(verifier, VT_FIELD81) &&
           VerifyField<int32_t>(verifier, VT_FIELD2) &&
           VerifyField<int32_t>(verifier, VT_FIELD3) &&
           VerifyField<int32_t>(verifier, VT_FIELD280) &&
           VerifyField<int32_t>(verifier, VT_FIELD6) &&
           VerifyField<int64_t>(verifier, VT_FIELD22) &&
           VerifyOffset(verifier, VT_FIELD4) &&
           verifier.VerifyVector(field4()) &&
           verifier.VerifyVectorOfStrings(field4()) &&
           VerifyField<uint8_t>(verifier, VT_FIELD59) &&
           VerifyField<int32_t>(verifier, VT_FIELD16) &&
           VerifyField<int32_t>(verifier, VT_FIELD150) &&
           VerifyField<int32_t>(verifier, VT_FIELD23) &&
           VerifyField<uint8_t>(verifier, VT_FIELD24) &&
           VerifyField<int32_t>(verifier, VT_FIELD25) &&
           VerifyOffset(verifier, VT_FIELD15) &&
           verifier.VerifyTable(field15()) &&
           VerifyField<uint8_t>(verifier, VT_FIELD78) &&
           VerifyField<int32_t>(verifier, VT_FIELD67) &&
           VerifyField<int32_t>(verifier, VT_FIELD68) &&
           VerifyField<int32_t>(verifier, VT_FIELD128) &&
           VerifyOffset(verifier, VT_FIELD129) &&
           verifier.VerifyString(field129()) &&
           VerifyField<int32_t>(verifier, VT_FIELD131) &&
           verifier.EndTable();
  }
};

struct Message1Builder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_field80(bool field80) {
    fbb_.AddElement<uint8_t>(Message1::VT_FIELD80, static_cast<uint8_t>(field80), 0);
  }
  void add_field81(bool field81) {
    fbb_.AddElement<uint8_t>(Message1::VT_FIELD81, static_cast<uint8_t>(field81), 0);
  }
  void add_field2(int32_t field2) {
    fbb_.AddElement<int32_t>(Message1::VT_FIELD2, field2, 0);
  }
  void add_field3(int32_t field3) {
    fbb_.AddElement<int32_t>(Message1::VT_FIELD3, field3, 0);
  }
  void add_field280(int32_t field280) {
    fbb_.AddElement<int32_t>(Message1::VT_FIELD280, field280, 0);
  }
  void add_field6(int32_t field6) {
    fbb_.AddElement<int32_t>(Message1::VT_FIELD6, field6, 0);
  }
  void add_field22(int64_t field22) {
    fbb_.AddElement<int64_t>(Message1::VT_FIELD22, field22, 0);
  }
  void add_field4(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> field4) {
    fbb_.AddOffset(Message1::VT_FIELD4, field4);
  }
  void add_field59(bool field59) {
    fbb_.AddElement<uint8_t>(Message1::VT_FIELD59, static_cast<uint8_t>(field59), 0);
  }
  void add_field16(int32_t field16) {
    fbb_.AddElement<int32_t>(Message1::VT_FIELD16, field16, 0);
  }
  void add_field150(int32_t field150) {
    fbb_.AddElement<int32_t>(Message1::VT_FIELD150, field150, 0);
  }
  void add_field23(int32_t field23) {
    fbb_.AddElement<int32_t>(Message1::VT_FIELD23, field23, 0);
  }
  void add_field24(bool field24) {
    fbb_.AddElement<uint8_t>(Message1::VT_FIELD24, static_cast<uint8_t>(field24), 0);
  }
  void add_field25(int32_t field25) {
    fbb_.AddElement<int32_t>(Message1::VT_FIELD25, field25, 0);
  }
  void add_field15(flatbuffers::Offset<benchmark::SubMessage> field15) {
    fbb_.AddOffset(Message1::VT_FIELD15, field15);
  }
  void add_field78(bool field78) {
    fbb_.AddElement<uint8_t>(Message1::VT_FIELD78, static_cast<uint8_t>(field78), 0);
  }
  void add_field67(int32_t field67) {
    fbb_.AddElement<int32_t>(Message1::VT_FIELD67, field67, 0);
  }
  void add_field68(int32_t field68) {
    fbb_.AddElement<int32_t>(Message1::VT_FIELD68, field68, 0);
  }
  void add_field128(int32_t field128) {
    fbb_.AddElement<int32_t>(Message1::VT_FIELD128, field128, 0);
  }
  void add_field129(flatbuffers::Offset<flatbuffers::String> field129) {
    fbb_.AddOffset(Message1::VT_FIELD129, field129);
  }
  void add_field131(int32_t field131) {
    fbb_.AddElement<int32_t>(Message1::VT_FIELD131, field131, 0);
  }
  explicit Message1Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Message1Builder &operator=(const Message1Builder &);
  flatbuffers::Offset<Message1> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Message1>(end);
    return o;
  }
};

inline flatbuffers::Offset<Message1> CreateMessage1(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool field80 = false,
    bool field81 = false,
    int32_t field2 = 0,
    int32_t field3 = 0,
    int32_t field280 = 0,
    int32_t field6 = 0,
    int64_t field22 = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> field4 = 0,
    bool field59 = false,
    int32_t field16 = 0,
    int32_t field150 = 0,
    int32_t field23 = 0,
    bool field24 = false,
    int32_t field25 = 0,
    flatbuffers::Offset<benchmark::SubMessage> field15 = 0,
    bool field78 = false,
    int32_t field67 = 0,
    int32_t field68 = 0,
    int32_t field128 = 0,
    flatbuffers::Offset<flatbuffers::String> field129 = 0,
    int32_t field131 = 0) {
  Message1Builder builder_(_fbb);
  builder_.add_field22(field22);
  builder_.add_field131(field131);
  builder_.add_field129(field129);
  builder_.add_field128(field128);
  builder_.add_field68(field68);
  builder_.add_field67(field67);
  builder_.add_field15(field15);
  builder_.add_field25(field25);
  builder_.add_field23(field23);
  builder_.add_field150(field150);
  builder_.add_field16(field16);
  builder_.add_field4(field4);
  builder_.add_field6(field6);
  builder_.add_field280(field280);
  builder_.add_field3(field3);
  builder_.add_field2(field2);
  builder_.add_field78(field78);
  builder_.add_field24(field24);
  builder_.add_field59(field59);
  builder_.add_field81(field81);
  builder_.add_field80(field80);
  return builder_.Finish();
}

inline flatbuffers::Offset<Message1> CreateMessage1Direct(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool field80 = false,
    bool field81 = false,
    int32_t field2 = 0,
    int32_t field3 = 0,
    int32_t field280 = 0,
    int32_t field6 = 0,
    int64_t field22 = 0,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *field4 = nullptr,
    bool field59 = false,
    int32_t field16 = 0,
    int32_t field150 = 0,
    int32_t field23 = 0,
    bool field24 = false,
    int32_t field25 = 0,
    flatbuffers::Offset<benchmark::SubMessage> field15 = 0,
    bool field78 = false,
    int32_t field67 = 0,
    int32_t field68 = 0,
    int32_t field128 = 0,
    const char *field129 = nullptr,
    int32_t field131 = 0) {
  auto field4__ = field4 ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*field4) : 0;
  auto field129__ = field129 ? _fbb.CreateString(field129) : 0;
  return benchmark::CreateMessage1(
      _fbb,
      field80,
      field81,
      field2,
      field3,
      field280,
      field6,
      field22,
      field4__,
      field59,
      field16,
      field150,
      field23,
      field24,
      field25,
      field15,
      field78,
      field67,
      field68,
      field128,
      field129__,
      field131);
}

struct Message2 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FIELD1 = 4,
    VT_FIELD2 = 6,
    VT_FIELD3 = 8,
    VT_FIELD4 = 10,
    VT_FIELD5 = 12,
    VT_FIELD6 = 14
  };
  benchmark::Enum field1() const {
    return static_cast<benchmark::Enum>(GetField<int32_t>(VT_FIELD1, 0));
  }
  uint64_t field2() const {
    return GetField<uint64_t>(VT_FIELD2, 0);
  }
  int32_t field3() const {
    return GetField<int32_t>(VT_FIELD3, 0);
  }
  const flatbuffers::String *field4() const {
    return GetPointer<const flatbuffers::String *>(VT_FIELD4);
  }
  int32_t field5() const {
    return GetField<int32_t>(VT_FIELD5, 0);
  }
  bool field6() const {
    return GetField<uint8_t>(VT_FIELD6, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_FIELD1) &&
           VerifyField<uint64_t>(verifier, VT_FIELD2) &&
           VerifyField<int32_t>(verifier, VT_FIELD3) &&
           VerifyOffset(verifier, VT_FIELD4) &&
           verifier.VerifyString(field4()) &&
           VerifyField<int32_t>(verifier, VT_FIELD5) &&
           VerifyField<uint8_t>(verifier, VT_FIELD6) &&
           verifier.EndTable();
  }
};

struct Message2Builder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_field1(benchmark::Enum field1) {
    fbb_.AddElement<int32_t>(Message2::VT_FIELD1, static_cast<int32_t>(field1), 0);
  }
  void add_field2(uint64_t field2) {
    fbb_.AddElement<uint64_t>(Message2::VT_FIELD2, field2, 0);
  }
  void add_field3(int32_t field3) {
    fbb_.AddElement<int32_t>(Message2::VT_FIELD3, field3, 0);
  }
  void add_field4(flatbuffers::Offset<flatbuffers::String> field4) {
    fbb_.AddOffset(Message2::VT_FIELD4, field4);
  }
  void add_field5(int32_t field5) {
    fbb_.AddElement<int32_t>(Message2::VT_FIELD5, field5, 0);
  }
  void add_field6(bool field6) {
    fbb_.AddElement<uint8_t>(Message2::VT_FIELD6, static_cast<uint8_t>(field6), 0);
  }
  explicit Message2Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Message2Builder &operator=(const Message2Builder &);
  flatbuffers::Offset<Message2> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Message2>(end);
    return o;
  }
};

inline flatbuffers::Offset<Message2> CreateMessage2(
    flatbuffers::FlatBufferBuilder &_fbb,
    benchmark::Enum field1 = benchmark::Enum_E0,
    uint64_t field2 = 0,
    int32_t field3 = 0,
    flatbuffers::Offset<flatbuffers::String> field4 = 0,
    int32_t field5 = 0,
    bool field6 = false) {
  Message2Builder builder_(_fbb);
  builder_.add_field2(field2);
  builder_.add_field5(field5);
  builder_.add_field4(field4);
  builder_.add_field3(field3);
  builder_.add_field1(field1);
  builder_.add_field6(field6);
  return builder_.Finish();
}

inline flatbuffers::Offset<Message2> CreateMessage2Direct(
    flatbuffers::FlatBufferBuilder &_fbb,
    benchmark::Enum field1 = benchmark::Enum_E0,
    uint64_t field2 = 0,
    int32_t field3 = 0,
    const char *field4 = nullptr,
    int32_t field5 = 0,
    bool field6 = false) {
  auto field4__ = field4 ? _fbb.CreateString(field4) : 0;
  return benchmark::CreateMessage2(
      _fbb,
      field1,
      field2,
      field3,
      field4__,
      field5,
      field6);
}

struct SubMessage2 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FIELD28 = 4,
    VT_FIELD2 = 6,
    VT_FIELD12 = 8,
    VT_FIELD19 = 10,
    VT_FIELD11 = 12
  };
  int32_t field28() const {
    return GetField<int32_t>(VT_FIELD28, 0);
  }
  int64_t field2() const {
    return GetField<int64_t>(VT_FIELD2, 0);
  }
  int32_t field12() const {
    return GetField<int32_t>(VT_FIELD12, 0);
  }
  const flatbuffers::String *field19() const {
    return GetPointer<const flatbuffers::String *>(VT_FIELD19);
  }
  int32_t field11() const {
    return GetField<int32_t>(VT_FIELD11, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_FIELD28) &&
           VerifyField<int64_t>(verifier, VT_FIELD2) &&
           VerifyField<int32_t>(verifier, VT_FIELD12) &&
           VerifyOffset(verifier, VT_FIELD19) &&
           verifier.VerifyString(field19()) &&
           VerifyField<int32_t>(verifier, VT_FIELD11) &&
           verifier.EndTable();
  }
};

struct SubMessage2Builder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_field28(int32_t field28) {
    fbb_.AddElement<int32_t>(SubMessage2::VT_FIELD28, field28, 0);
  }
  void add_field2(int64_t field2) {
    fbb_.AddElement<int64_t>(SubMessage2::VT_FIELD2, field2, 0);
  }
  void add_field12(int32_t field12) {
    fbb_.AddElement<int32_t>(SubMessage2::VT_FIELD12, field12, 0);
  }
  void add_field19(flatbuffers::Offset<flatbuffers::String> field19) {
    fbb_.AddOffset(SubMessage2::VT_FIELD19, field19);
  }
  void add_field11(int32_t field11) {
    fbb_.AddElement<int32_t>(SubMessage2::VT_FIELD11, field11, 0);
  }
  explicit SubMessage2Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SubMessage2Builder &operator=(const SubMessage2Builder &);
  flatbuffers::Offset<SubMessage2> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SubMessage2>(end);
    return o;
  }
};

inline flatbuffers::Offset<SubMessage2> CreateSubMessage2(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t field28 = 0,
    int64_t field2 = 0,
    int32_t field12 = 0,
    flatbuffers::Offset<flatbuffers::String> field19 = 0,
    int32_t field11 = 0) {
  SubMessage2Builder builder_(_fbb);
  builder_.add_field2(field2);
  builder_.add_field11(field11);
  builder_.add_field19(field19);
  builder_.add_field12(field12);
  builder_.add_field28(field28);
  return builder_.Finish();
}

inline flatbuffers::Offset<SubMessage2> CreateSubMessage2Direct(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t field28 = 0,
    int64_t field2 = 0,
    int32_t field12 = 0,
    const char *field19 = nullptr,
    int32_t field11 = 0) {
  auto field19__ = field19 ? _fbb.CreateString(field19) : 0;
  return benchmark::CreateSubMessage2(
      _fbb,
      field28,
      field2,
      field12,
      field19__,
      field11);
}

struct Message3 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FIELD13 = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<benchmark::SubMessage2>> *field13() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<benchmark::SubMessage2>> *>(VT_FIELD13);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FIELD13) &&
           verifier.VerifyVector(field13()) &&
           verifier.VerifyVectorOfTables(field13()) &&
           verifier.EndTable();
  }
};

struct Message3Builder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_field13(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<benchmark::SubMessage2>>> field13) {
    fbb_.AddOffset(Message3::VT_FIELD13, field13);
  }
  explicit Message3Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Message3Builder &operator=(const Message3Builder &);
  flatbuffers::Offset<Message3> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Message3>(end);
    return o;
  }
};

inline flatbuffers::Offset<Message3> CreateMessage3(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<benchmark::SubMessage2>>> field13 = 0) {
  Message3Builder builder_(_fbb);
  builder_.add_field13(field13);
  return builder_.Finish();
}

inline flatbuffers::Offset<Message3> CreateMessage3Direct(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<benchmark::SubMessage2>> *field13 = nullptr) {
  auto field13__ = field13 ? _fbb.CreateVector<flatbuffers::Offset<benchmark::SubMessage2>>(*field13) : 0;
  return benchmark::CreateMessage3(
      _fbb,
      field13__);
}

struct Message FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ONEOF_TYPE = 4,
    VT_ONEOF = 6
  };
  benchmark::Oneof oneof_type() const {
    return static_cast<benchmark::Oneof>(GetField<uint8_t>(VT_ONEOF_TYPE, 0));
  }
  const void *oneof() const {
    return GetPointer<const void *>(VT_ONEOF);
  }
  template<typename T> const T *oneof_as() const;
  const benchmark::Message1 *oneof_as_message1() const {
    return oneof_type() == benchmark::Oneof_message1 ? static_cast<const benchmark::Message1 *>(oneof()) : nullptr;
  }
  const benchmark::Message2 *oneof_as_message2() const {
    return oneof_type() == benchmark::Oneof_message2 ? static_cast<const benchmark::Message2 *>(oneof()) : nullptr;
  }
  const benchmark::Message3 *oneof_as_message3() const {
    return oneof_type() == benchmark::Oneof_message3 ? static_cast<const benchmark::Message3 *>(oneof()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_ONEOF_TYPE) &&
           VerifyOffset(verifier, VT_ONEOF) &&
           VerifyOneof(verifier, oneof(), oneof_type()) &&
           verifier.EndTable();
  }
};

template<> inline const benchmark::Message1 *Message::oneof_as<benchmark::Message1>() const {
  return oneof_as_message1();
}

template<> inline const benchmark::Message2 *Message::oneof_as<benchmark::Message2>() const {
  return oneof_as_message2();
}

template<> inline const benchmark::Message3 *Message::oneof_as<benchmark::Message3>() const {
  return oneof_as_message3();
}

struct MessageBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_oneof_type(benchmark::Oneof oneof_type) {
    fbb_.AddElement<uint8_t>(Message::VT_ONEOF_TYPE, static_cast<uint8_t>(oneof_type), 0);
  }
  void add_oneof(flatbuffers::Offset<void> oneof) {
    fbb_.AddOffset(Message::VT_ONEOF, oneof);
  }
  explicit MessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MessageBuilder &operator=(const MessageBuilder &);
  flatbuffers::Offset<Message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Message>(end);
    return o;
  }
};

inline flatbuffers::Offset<Message> CreateMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    benchmark::Oneof oneof_type = benchmark::Oneof_NONE,
    flatbuffers::Offset<void> oneof = 0) {
  MessageBuilder builder_(_fbb);
  builder_.add_oneof(oneof);
  builder_.add_oneof_type(oneof_type);
  return builder_.Finish();
}

inline bool VerifyOneof(flatbuffers::Verifier &verifier, const void *obj, Oneof type) {
  switch (type) {
    case Oneof_NONE: {
      return true;
    }
    case Oneof_message1: {
      auto ptr = reinterpret_cast<const benchmark::Message1 *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Oneof_message2: {
      auto ptr = reinterpret_cast<const benchmark::Message2 *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Oneof_message3: {
      auto ptr = reinterpret_cast<const benchmark::Message3 *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyOneofVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyOneof(
        verifier,  values->Get(i), types->GetEnum<Oneof>(i))) {
      return false;
    }
  }
  return true;
}

}  // namespace benchmark

#endif  // FLATBUFFERS_GENERATED_BENCHMARK_BENCHMARK_H_
