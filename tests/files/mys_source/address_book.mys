# This file was generated by pbtools.

from pbtools import Decoder
from pbtools import Encoder

@enum
class PhoneType:
    MOBILE = 0
    HOME = 1
    WORK = 2

class PhoneNumber:
    number: string
    type: PhoneType

    def clear(self):
        self.number = ""
        self.type = PhoneType(0)

    def to_bytes(self) -> bytes:
        encoder = Encoder()
        self.to_bytes_inner(encoder)

        return encoder.data()

    def from_bytes(self, data: bytes):
        self.clear()
        self.from_bytes_inner(Decoder(data, 0, i64(len(data))))

    def to_bytes_inner(self, encoder: Encoder):
        encoder.write_enum(2, i64(self.type))
        encoder.write(1, self.number)

    def from_bytes_inner(self, decoder: Decoder):
        while decoder.available():
            field_number, wire_type = decoder.read_tag()

            match field_number:
                case 1:
                    self.number = decoder.read_string(wire_type)
                case 2:
                    self.type = PhoneType(i64(decoder.read_i32(wire_type)))
                case _:
                    decoder.skip_field(wire_type)

class Person:
    name: string
    id: i32
    email: string
    phones: [PhoneNumber]

    def clear(self):
        self.name = ""
        self.id = 0
        self.email = ""
        self.phones.clear()

    def to_bytes(self) -> bytes:
        encoder = Encoder()
        self.to_bytes_inner(encoder)

        return encoder.data()

    def from_bytes(self, data: bytes):
        self.clear()
        self.from_bytes_inner(Decoder(data, 0, i64(len(data))))

    def to_bytes_inner(self, encoder: Encoder):
        for item in reversed(self.phones):
            pos = encoder.pos
            item.to_bytes_inner(encoder)
            encoder.write_length_delimited(4, u64(pos - encoder.pos))

        encoder.write(3, self.email)
        encoder.write(2, self.id)
        encoder.write(1, self.name)

    def from_bytes_inner(self, decoder: Decoder):
        while decoder.available():
            field_number, wire_type = decoder.read_tag()

            match field_number:
                case 1:
                    self.name = decoder.read_string(wire_type)
                case 2:
                    self.id = decoder.read_i32(wire_type)
                case 3:
                    self.email = decoder.read_string(wire_type)
                case 4:
                    item = PhoneNumber("", PhoneType.Mobile)
                    item.from_bytes_inner(
                        decoder.slice(i64(
                            decoder.read_length_delimited(WireType.LengthDelimited))))
                    self.phones.append(item)
                case _:
                    decoder.skip_field(wire_type)

class AddressBook:
    people: [Person]

    def clear(self):
        self.people.clear()

    def to_bytes(self) -> bytes:
        encoder = Encoder()
        self.to_bytes_inner(encoder)

        return encoder.data()

    def from_bytes(self, data: bytes):
        self.clear()
        self.from_bytes_inner(Decoder(data, 0, i64(len(data))))

    def to_bytes_inner(self, encoder: Encoder):
        for item in reversed(self.people):
            pos = encoder.pos
            item.to_bytes_inner(encoder)
            encoder.write_length_delimited(1, u64(pos - encoder.pos))

    def from_bytes_inner(self, decoder: Decoder):
        while decoder.available():
            field_number, wire_type = decoder.read_tag()

            match field_number:
                case 1:
                    item = Person("", 0, "", [])
                    item.from_bytes_inner(
                        decoder.slice(i64(
                            decoder.read_length_delimited(WireType.LengthDelimited))))
                    self.people.append(item)
                case _:
                    decoder.skip_field(wire_type)
