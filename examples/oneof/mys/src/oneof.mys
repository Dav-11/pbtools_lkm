# This file was generated by pbtools.

from pbtools import Decoder
from pbtools import Encoder

@enum
class FooBar:
    Fie = 0
    Fum = 1

class Foo:
    bar: FooBar
    fie: i32
    fum: bool

    def clear(self):
        self.bar = FooBar.Fie
        self.fie = 0
        self.fum = False

    def to_bytes(self) -> bytes:
        encoder = Encoder()
        self.to_bytes_inner(encoder)

        return encoder.data()

    def from_bytes(self, data: bytes):
        self.clear()
        self.from_bytes_inner(Decoder(data, 0, i64(len(data))))

    def to_bytes_inner(self, encoder: Encoder):
        match self.bar:
            case FooBar.Fie:
                encoder.write_i32_always(1, self.fie)
            case FooBar.Fum:
                encoder.write_bool_always(2, self.fum)

    def from_bytes_inner(self, decoder: Decoder):
        while decoder.available():
            field_number, wire_type = decoder.read_tag()

            match field_number:
                case 1:
                    self.fie = decoder.read_i32(wire_type)
                case 2:
                    self.fum = decoder.read_bool(wire_type)
                case _:
                    decoder.skip_field(wire_type)
