/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by pbtools version 0.1.0 Sat Aug 24 11:24:15 2019.
 */

#ifndef BENCHMARK_H
#define BENCHMARK_H

#include <stdint.h>
#include <stdlib.h>
#include <stdbool.h>

struct benchmark_heap_t {
    char *buf_p;
    int size;
    int pos;
};

/**
 * Message Benchmark in package benchmark.
 */
struct benchmark_benchmark_t {
    struct benchmark_heap_t *heap_p;
    int32_t v1;
};

/**
 * Create a new message Benchmark in given workspace.
 *
 * @param[in] src_p Data to decode.
 * @param[in] size Size of src_p.
 *
 * @return Initialized address book, or NULL on failure.
 */
struct benchmark_benchmark_t *benchmark_benchmark_new(
    void *workspace_p,
    size_t size);

/**
 * Encode message Benchmark defined in package benchmark.
 *
 * @param[out] dst_p Buffer to encode into.
 * @param[in] size Size of dst_p.
 * @param[in] src_p Data to encode.
 *
 * @return Encoded data length or negative error code.
 */
int benchmark_benchmark_encode(
    struct benchmark_benchmark_t *message_p,
    uint8_t *encoded_p,
    size_t size);

/**
 * Decode message Benchmark defined in package benchmark.
 *
 * @param[out] dst_p Decoded data.
 * @param[in] src_p Data to decode.
 * @param[in] size Size of src_p.
 *
 * @return Number of bytes decoded or negative error code.
 */
int benchmark_benchmark_decode(
    struct benchmark_benchmark_t *message_p,
    const uint8_t *encoded_p,
    size_t size);

#endif
