# This file was generated by pbtools.

@enum
class WireType:
    Varint = 0
    Bits64 = 1
    LengthDelimited = 2
    Bits32 = 5

class Encoder:
    pos: u64
    buf: bytes

    def __init__(self):
        self.pos = 99
        self.buf = bytes(100)

    def write_enum(self, field_number: i64, value: i64):
        self.write(field_number, i32(value))

    def write(self, field_number: i64, value: string):
        if len(value) == 0:
            return

        data = value.to_utf8()
        self.write(data)
        self.write_tagged_varint(field_number, WireType.LengthDelimited, len(data))

    def write(self, field_number: i64, value: i32):
        self.write_tagged_varint(field_number, WireType.Varint, u64(i64(value)))

    def write(self, value: bytes):
        self.pos -= len(value)

        for i in range(i64(len(value))):
            self.buf[i64(self.pos) + 1 + i] = value[i]

    def write_length_delimited(self, field_number: i64, value: u64):
        self.write_varint(value)
        self.write_tag(field_number, WireType.LengthDelimited)

    def write_tagged_varint(self, field_number: i64, wire_type: WireType, value: u64):
        if value == 0:
            return

        self.write_varint(value)
        self.write_tag(field_number, wire_type)

    def write_varint(self, value: u64):
        buf = b""

        while True:
            buf += u8(value | 0x80)
            value >>= 7

            if value == 0:
                break

        buf[-1] &= 0x7f
        self.write(buf)

    def write_tag(self, field_number: i64, wire_type: WireType):
        self.write_varint(u64((field_number << 3) | i64(wire_type)))

    def result(self) -> bytes:
        r = b""

        for i in range(i64(self.pos + 1), i64(len(self.buf))):
            r += self.buf[i]

        return r

@enum
class PersonPhoneType:
    Mobile = 0
    Home = 1
    Work = 2

class PersonPhoneNumber:
    number: string
    type: PersonPhoneType

    def to_bytes_inner(self, encoder: Encoder):
        encoder.write_enum(2, i64(self.type))
        encoder.write(1, self.number)

class Person:
    name: string
    id: i32
    email: string
    phones: [PersonPhoneNumber]

    def to_bytes_inner(self, encoder: Encoder):
        for phone in reversed(self.phones):
            pos = encoder.pos
            phone.to_bytes_inner(encoder)
            encoder.write_length_delimited(4, u64(pos - encoder.pos))

        encoder.write(3, self.email)
        encoder.write(2, self.id)
        encoder.write(1, self.name)

class AddressBook:
    people: [Person]

    def __init__(self, people: [Person]):
        self.people = people

    def __init__(self, data: bytes):
        self.people = []

    def to_bytes(self) -> bytes:
        encoder = Encoder()
        self.to_bytes_inner(encoder)

        return encoder.result()

    def to_bytes_inner(self, encoder: Encoder):
        for person in reversed(self.people):
            pos = encoder.pos
            person.to_bytes_inner(encoder)
            encoder.write_length_delimited(1, u64(pos - encoder.pos))
