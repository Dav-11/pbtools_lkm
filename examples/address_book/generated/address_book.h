/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by asn1tools version 0.145.2 Thu Jan 24 08:14:06 2019.
 */

#ifndef UPER_H
#define UPER_H

#include <stdint.h>
#include <stdbool.h>

enum address_book_person_phone_type_e {
    address_book_person_phone_type_mobile_e = 0,
    address_book_person_phone_type_home_e = 1,
    address_book_person_phone_type_work_e = 2
};

struct address_book_person_phone_number_t {
    char *number_p;
    enum address_book_person_phone_type_e type;
};

struct address_book_person_t {
    char *name_p;
    int32_t id;
    char *email_p;
    struct {
        int length;
        struct address_book_person_phone_number_t **elems_pp;
    } phones;
};

struct address_book_adderss_book_t {
    struct {
        int length;
        struct address_book_person_t **elems_pp;
    } people;
};

struct address_book_person_t *address_book_person_alloc(void);

void address_book_person_free(struct address_book_person_t *person_p);

int address_book_person_set_name(
    struct address_book_person_t *person_p,
    const char *value_p);

const char *address_book_person_get_name(
    struct address_book_person_t *person_p);

int address_book_person_set_id(
    struct address_book_person_t *person_p,
    int32_t value);

int32_t address_book_person_get_id(
    struct address_book_person_t *person_p);

int address_book_person_set_email(
    struct address_book_person_t *person_p,
    const char *value_p);

const char *address_book_person_get_email(
    struct address_book_person_t *person_p);

int address_book_person_phones_length(
    struct address_book_person_t *person_p);

struct address_book_person_phone_number_t *address_book_person_phones_add(
    struct address_book_person_t *person_p);

struct address_book_person_phone_number_t *address_book_person_phones_get(
    struct address_book_person_t *person_p,
    int index);

int address_book_person_phone_number_set_number(
    struct address_book_person_phone_number_t *phone_number_p,
    const char *value_p);

const char *address_book_person_phone_number_get_number(
    struct address_book_person_phone_number_t *phone_number_p);

int address_book_person_phone_number_set_type(
    struct address_book_person_phone_number_t *phone_number_p,
    enum address_book_person_phone_type_e value);

enum address_book_person_phone_type_e address_book_person_phone_number_get_type(
    struct address_book_person_phone_number_t *phone_number_p);

struct address_book_adderss_book_t *address_book_adderss_book_alloc(void);

void address_book_adderss_book_free(struct address_book_adderss_book_t *address_book_p);

int address_book_adderss_book_people_length(
    struct address_book_adderss_book_t *address_book_p);

struct address_book_person_t *address_book_adderss_book_people_add(
    struct address_book_adderss_book_t *address_book_p);

struct address_book_person_t *address_book_adderss_book_people_get(
    struct address_book_adderss_book_t *address_book_p,
    int index);

int address_book_adderss_book_encode(
    struct address_book_adderss_book_t *address_book_p,
    uint8_t **encoded_pp);

int address_book_adderss_book_decode(
    const uint8_t *encoded_p,
    struct address_book_adderss_book_t **address_book_pp);

#endif
