import re
import time

from .version import __version__


HEADER_FMT = '''\
/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by pbtools version {version} {date}.
 */

#ifndef {include_guard}
#define {include_guard}

#include <stdint.h>
#include <stdbool.h>

struct {namespace}_heap_t {{
    char *buf_p;
    int size;
    int pos;
}};

{structs}
{declarations}
#endif
'''

SOURCE_FMT = '''\
/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by pbtools version {version} {date}.
 */

#include <string.h>

#include "{header}"

struct encoder_t {{
    uint8_t *buf_p;
    int size;
    int pos;
}};

struct decoder_t {{
    const uint8_t *buf_p;
    int size;
    int pos;
    struct bool_heap_t *heap_p;
}};

static uint8_t tag(int field_number, int wire_type)
{{
    return ((field_number << 3) | wire_type);
}}

static struct bool_heap_t *heap_new(void *buf_p, size_t size)
{{
    struct bool_heap_t *heap_p;

    if (size >= sizeof(*heap_p)) {{
        heap_p = (struct bool_heap_t *)buf_p;
        heap_p->buf_p = buf_p;
        heap_p->size = size;
        heap_p->pos = sizeof(*heap_p);
    }} else {{
        heap_p = NULL;
    }}

    return (heap_p);
}}

static void *heap_alloc(struct bool_heap_t *self_p, size_t size)
{{
    void *buf_p;
    int left;

    left = (self_p->size - self_p->pos);

    if (size <= left) {{
        buf_p = &self_p->buf_p[self_p->pos];
        self_p->pos += size;
    }} else {{
        buf_p = NULL;
    }}

    return (buf_p);
}}

static void encoder_init(struct encoder_t *self_p,
                         uint8_t *buf_p,
                         size_t size)
{{
    self_p->buf_p = buf_p;
    self_p->size = size;
    self_p->pos = (size - 1);
}}

static size_t encoder_pos(struct encoder_t *self_p)
{{
    return (self_p->pos);
}}

static int encoder_get_result(struct encoder_t *self_p)
{{
    int length;

    length = (self_p->size - self_p->pos - 1);
    memmove(self_p->buf_p,
            &self_p->buf_p[self_p->pos + 1],
            length);

    return (length);
}}

static void encoder_put(struct encoder_t *self_p,
                                 uint8_t value)
{{
    if (self_p->pos < 0) {{
        fprintf(stderr, "encoder_put: %d\n", self_p->pos);
        exit(1);
    }}

    self_p->buf_p[self_p->pos] = value;
    self_p->pos--;
}}

static void encoder_write(struct encoder_t *self_p,
                          uint8_t *buf_p,
                          int size)
{{
    int i;

    for (i = size - 1; i >= 0; i--) {{
        encoder_put(self_p, buf_p[i]);
    }}
}}

static void encoder_write_bool(struct encoder_t *self_p,
                                 int field_number,
                                 bool value)
{{
    if (value) {{
        encoder_put(self_p, 1);
        encoder_put(self_p, tag(field_number, 0));
    }}
}}

static void encoder_write_bytes(struct encoder_t *self_p,
                                int field_number,
                                uint8_t *value_p,
                                size_t size)
{{
    if (size > 0) {{
        encoder_write(self_p, value_p, size);
        encoder_write_varint(self_p, field_number, 2, size);
    }}
}}

static void decoder_init(struct decoder_t *self_p,
                         const uint8_t *buf_p,
                         size_t size,
                         struct bool_heap_t *heap_p)
{{
    self_p->buf_p = buf_p;
    self_p->size = size;
    self_p->pos = 0;
    self_p->heap_p = heap_p;
}}

static int decoder_get_result(struct decoder_t *self_p)
{{
    int res;

    if (self_p->pos == self_p->size) {{
        res = self_p->pos;
    }} else {{
        res = -1;
    }}

    return (res);
}}

static bool decoder_available(struct decoder_t *self_p)
{{
    return (self_p->pos < self_p->size);
}}

static uint8_t decoder_get(struct decoder_t *self_p)
{{
    uint8_t value;

    if (decoder_available(self_p)) {{
        value = self_p->buf_p[self_p->pos];
        self_p->pos++;
    }} else {{
        self_p->size = -1;
        value = 0;
    }}

    return (value);
}}

static void decoder_read(struct decoder_t *self_p,
                         uint8_t *buf_p,
                         int size)
{{
    int i;

    for (i = 0; i < size; i++) {{
        buf_p[i] = decoder_get(self_p);
    }}
}}

static int decoder_read_tag(struct decoder_t *self_p,
                            int *wire_type_p)
{{
    uint8_t value;

    value = decoder_get(self_p);
    *wire_type_p = (value & 0x7);

    return (value >> 3);
}}

static uint64_t decoder_read_varint(struct decoder_t *self_p)
{{
    uint64_t value;
    uint8_t byte;
    int offset;

    value = 0;
    offset = 0;

    do {{
        byte = decoder_get(self_p);
        value |= (((uint64_t)byte & 0x7f) << offset);
        offset += 7;
    }} while (byte & 0x80);

    return (value);
}}

static bool decoder_read_bool(struct decoder_t *self_p,
                              int wire_type)
{{
    if (wire_type != 0) {{
        return (false);
    }}

    return (decoder_read_byte(self_p) == 1);
}}

static uint8_t *decoder_read_bytes(struct decoder_t *self_p,
                                   int wire_type,
                                   size_t *size_p)
{{
    uint64_t size;
    uint8_t *value_p;

    if (wire_type != 2) {{
        return (NULL);
    }}

    size = decoder_read_varint(self_p);
    value_p = heap_alloc(self_p->heap_p, size);

    if (value_p == NULL) {{
        return (NULL);
    }}

    decoder_read(self_p, value_p, size);
    *size_p = size;

    return (value_p);
}}

{helpers}
{definitions}\
'''

STRUCT_FMT = '''\
struct {namespace}_{name}_t {{
{members}
}};
'''


def canonical(value):
    """Replace anything but 'a-z', 'A-Z' and '0-9' with '_'.

    """

    return re.sub(r'[^a-zA-Z0-9]', '_', value)


def camel_to_snake_case(value):
    value = re.sub(r'(.)([A-Z][a-z]+)', r'\1_\2', value)
    value = re.sub(r'(_+)', '_', value)
    value = re.sub(r'([a-z0-9])([A-Z])', r'\1_\2', value).lower()
    value = canonical(value)

    return value


def _generate_members(message):
    members = []

    for field in message.fields:
        members.append(f'    {camel_to_snake_case(field.type)}_t {field.name};')

    if not members:
        members = [
            '    uint8_t dummy;'
        ]

    return members


def generate_structs(namespace, parsed):
    structs = []

    for message in parsed.messages:
        members = _generate_members(message)
        structs.append(
            STRUCT_FMT.format(namespace=namespace,
                              name=camel_to_snake_case(message.name),
                              members='\n'.join(members)))

    return '\n'.join(structs)


def generate(namespace, parsed):
    """Generate C source code from given parsed proto-file.

    """

    date = time.ctime()
    namespace = camel_to_snake_case(namespace)
    include_guard = '{}_H'.format(namespace.upper())

    structs = generate_structs(namespace, parsed)
    declarations = ''
    header_name = ''
    helpers = ''
    definitions = ''

    header = HEADER_FMT.format(version=__version__,
                               date=date,
                               namespace=namespace,
                               include_guard=include_guard,
                               structs=structs,
                               declarations=declarations)

    source = SOURCE_FMT.format(version=__version__,
                               date=date,
                               namespace=namespace,
                               header=header_name,
                               helpers=helpers,
                               definitions=definitions)

    return header, source
